name: App Deployment 

on: 
    push: 
        branches: 
            - main
    workflow_dispatch:
jobs:
    test-and-deploy:
        runs-on: ubuntu-latest

        services:
            mongo:
                image: mongo
                ports:
                - 27017:27017

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # - name: Test vote service
            #   working-directory: ./app
            #   run: |
            #     docker build -t vote-test ./vote_service
            #     docker run --rm vote-test pytest

            # - name: Test results service
            #   working-directory: ./app
            #   run: |
            #     docker build -t results-test ./results_service
            #     docker run --rm results-test pytest

            - name: Build & Push Vote Service
              working-directory: ./app
              run: |
                docker build -t ${{ secrets.DOCKER_USERNAME }}/vote:latest ./vote_service
                docker push ${{ secrets.DOCKER_USERNAME }}/vote:latest

            - name: Build & Push Results Service
              working-directory: ./app
              run: |
                docker build -t ${{ secrets.DOCKER_USERNAME }}/results:latest ./results_service
                docker push ${{ secrets.DOCKER_USERNAME }}/results:latest

            - name: Build & Push Worker Service
              working-directory: ./app
              run: |
                docker build -t ${{ secrets.DOCKER_USERNAME }}/web:latest ./web
                docker push ${{ secrets.DOCKER_USERNAME }}/web:latest


    deploy:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        env:
            ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
            ROLE_NAME: ${{ secrets.ROLE_NAME }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
            aws-region: ap-south-1

      - name: Download Terraform state
        run: |
          aws s3 cp s3://terraformstate1853/dev/terraform.tfstate terraform.tfstate

      - name: Extract EC2 IP
        id: extract_ip
        run: |
          EC2_IP=$(jq -r '.resources[] | select(.type=="aws_instance") | .instances[].attributes.public_ip' terraform.tfstate)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV

      - name: Add SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_IP << 'EOF'
            docker pull shorya1853/results
            docker stop results || true
            docker rm results || true
            docker run -d -p 80:80 --name results shorya1853/results
          EOF



